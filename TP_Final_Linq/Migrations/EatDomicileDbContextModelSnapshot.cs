// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TP_Final_Linq.DAL;

#nullable disable

namespace TP_Final_Linq.Migrations
{
    [DbContext(typeof(EatDomicileDbContext))]
    partial class EatDomicileDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Adress", b =>
                {
                    b.Property<long>("AdresseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AdresseId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("AdresseId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Dough", b =>
                {
                    b.Property<long>("DoughId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DoughId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoughId");

                    b.ToTable("Doughs");
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Ingredient", b =>
                {
                    b.Property<long>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IngredientId"));

                    b.Property<long?>("BurgerId")
                        .HasColumnType("bigint");

                    b.Property<float>("Kcal")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("PizzaId")
                        .HasColumnType("bigint");

                    b.HasKey("IngredientId");

                    b.HasIndex("BurgerId");

                    b.HasIndex("PizzaId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderId"));

                    b.Property<long>("DeliveryAddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("OrderId");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("ProductId");

                    b.ToTable("Product", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<long>("AdresseId")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.HasIndex("AdresseId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Drink", b =>
                {
                    b.HasBaseType("TP_Final_Linq.DAL.Product");

                    b.Property<bool>("Fizzy")
                        .HasColumnType("bit");

                    b.Property<float>("Kcal")
                        .HasColumnType("real");

                    b.ToTable("Drink", (string)null);
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Food", b =>
                {
                    b.HasBaseType("TP_Final_Linq.DAL.Product");

                    b.Property<bool>("Vegetarian")
                        .HasColumnType("bit");

                    b.ToTable("Food", (string)null);
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Burger", b =>
                {
                    b.HasBaseType("TP_Final_Linq.DAL.Food");

                    b.ToTable("Burger", null, t =>
                        {
                            t.Property("ProductId")
                                .HasColumnName("BurgerId");
                        });
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Pasta", b =>
                {
                    b.HasBaseType("TP_Final_Linq.DAL.Food");

                    b.Property<float>("Kcal")
                        .HasColumnType("real");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Pasta", (string)null);
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Pizza", b =>
                {
                    b.HasBaseType("TP_Final_Linq.DAL.Food");

                    b.Property<long?>("DoughId")
                        .HasColumnType("bigint");

                    b.HasIndex("DoughId");

                    b.ToTable("Pizza", null, t =>
                        {
                            t.Property("ProductId")
                                .HasColumnName("PizzaId");
                        });
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("TP_Final_Linq.DAL.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TP_Final_Linq.DAL.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Ingredient", b =>
                {
                    b.HasOne("TP_Final_Linq.DAL.Burger", "Burger")
                        .WithMany("Ingredients")
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TP_Final_Linq.DAL.Pizza", "Pizza")
                        .WithMany("Ingredients")
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Burger");

                    b.Navigation("Pizza");
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Order", b =>
                {
                    b.HasOne("TP_Final_Linq.DAL.Adress", "Adress")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TP_Final_Linq.DAL.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.User", b =>
                {
                    b.HasOne("TP_Final_Linq.DAL.Adress", "Adresse")
                        .WithMany("Users")
                        .HasForeignKey("AdresseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Adresse");
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Drink", b =>
                {
                    b.HasOne("TP_Final_Linq.DAL.Product", null)
                        .WithOne()
                        .HasForeignKey("TP_Final_Linq.DAL.Drink", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Food", b =>
                {
                    b.HasOne("TP_Final_Linq.DAL.Product", null)
                        .WithOne()
                        .HasForeignKey("TP_Final_Linq.DAL.Food", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Burger", b =>
                {
                    b.HasOne("TP_Final_Linq.DAL.Food", null)
                        .WithOne()
                        .HasForeignKey("TP_Final_Linq.DAL.Burger", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Pasta", b =>
                {
                    b.HasOne("TP_Final_Linq.DAL.Food", null)
                        .WithOne()
                        .HasForeignKey("TP_Final_Linq.DAL.Pasta", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Pizza", b =>
                {
                    b.HasOne("TP_Final_Linq.DAL.Dough", "Dough")
                        .WithMany()
                        .HasForeignKey("DoughId");

                    b.HasOne("TP_Final_Linq.DAL.Food", null)
                        .WithOne()
                        .HasForeignKey("TP_Final_Linq.DAL.Pizza", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dough");
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Adress", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.User", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Burger", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("TP_Final_Linq.DAL.Pizza", b =>
                {
                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
